{"version":3,"sources":["Components/MainPage.module.css","Components/MainPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","MainPage","props","className","styles","mpContainer","topContainer","topContent","backdrop","src","alt","btmContainer","namesSvg","InfoSectionHeader","text","infoTextRow","infoSectionHeader","infoSectionHeaderText","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,YAAc,8BAA8B,aAAe,+BAA+B,WAAa,6BAA6B,aAAe,+BAA+B,SAAW,2BAA2B,SAAW,2BAA2B,MAAQ,wBAAwB,kBAAoB,oCAAoC,sBAAwB,wCAAwC,YAAc,gC,wJCG/a,SAASC,EAASC,GACrB,OACA,yBAAKC,UAAWC,IAAOC,aACnB,yBAAKF,UAAWC,IAAOE,cACnB,yBAAKH,UAAWC,IAAOG,aAEvB,yBAAKJ,UAAWC,IAAOI,SAAUC,IAAK,iBAAkBC,IAAK,UAGjE,yBAAKP,UAAWC,IAAOO,cACnB,yBAAKR,UAAWC,IAAOQ,SAAUH,IAAK,cAAeC,IAAK,SAE1D,kBAACG,EAAD,CAAmBC,KAAM,SAEzB,uBAAGX,UAAWC,IAAOW,aAArB,uBAGA,uBAAGZ,UAAWC,IAAOW,aAArB,qBAGA,uBAAGZ,UAAWC,IAAOW,aAArB,6BASZ,SAASF,EAAkBX,GAAQ,IACxBY,EAAQZ,EAARY,KAEP,OAAQ,yBAAKX,UAAWC,IAAOY,mBAC3B,uBAAGb,UAAWC,IAAOa,uBAAwBH,IC5BtCI,MANf,SAAahB,GACX,OACE,kBAACD,EAAD,OCOgBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.385930dd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mpContainer\":\"MainPage_mpContainer__3cpNU\",\"topContainer\":\"MainPage_topContainer__2pFLU\",\"topContent\":\"MainPage_topContent__3eOov\",\"btmContainer\":\"MainPage_btmContainer__A_TzU\",\"backdrop\":\"MainPage_backdrop__vipFc\",\"namesSvg\":\"MainPage_namesSvg___xjSN\",\"names\":\"MainPage_names__23d9Z\",\"infoSectionHeader\":\"MainPage_infoSectionHeader__36-l-\",\"infoSectionHeaderText\":\"MainPage_infoSectionHeaderText__1BlGs\",\"infoTextRow\":\"MainPage_infoTextRow__2C231\"};","import React from 'react';\n\nimport styles from './MainPage.module.css';\n\nexport function MainPage(props) {\n    return (\n    <div className={styles.mpContainer}>\n        <div className={styles.topContainer}>\n            <div className={styles.topContent}>\n            </div>    \n            <img className={styles.backdrop} src={'./backdrop.svg'} alt={'line'} />\n        \n        </div>    \n        <div className={styles.btmContainer}>\n            <img className={styles.namesSvg} src={'./names.svg'} alt={'line'} />\n\n            <InfoSectionHeader text={\"info\"} />\n\n            <p className={styles.infoTextRow}>\n                var? Chalmersbastun\n            </p>\n            <p className={styles.infoTextRow}>\n                n√§r? 4/7 16:00\n            </p>\n            <p className={styles.infoTextRow}>\n                hur? o.s.a. och kom dit\n            </p>\n        </div>    \n    </div>);\n}\n\n\n\nfunction InfoSectionHeader(props) {\n    const {text} = props;\n\n    return (<div className={styles.infoSectionHeader}>\n        <p className={styles.infoSectionHeaderText}>{text}</p>\n    </div>);\n}","import React from 'react';\nimport { MainPage } from './Components/MainPage';\n\nfunction App(props) {\n  return (\n    <MainPage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}